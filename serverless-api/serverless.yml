# serverless.yml

service: my-express-application

plugins:
  # - serverless-dynamodb-local
  # - serverless-plugin-typescript
  - serverless-webpack
  - serverless-domain-manager
  - serverless-offline

package:
  exclude:
    - '**/*.ts'
    - 'test/**'
    - 'scripts/**'
    - '.vscode/**'

custom:
  tableName_cow: 'cow-${self:provider.stage}'
  serverless-offline:
    port: 4000
  # dynamodb:
  #   # If you only want to use DynamoDB Local in some stages, declare them here
  #   stages:
  #     - dev
  #   start:
  #     port: 4001
  customDomain:
    domainName: api.cowsayify.com
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { 'Fn::GetAtt': ['UsersDynamoDBTable', 'Arn'] }
  environment:
    COWS_TABLE: ${self:custom.tableName_cow}

functions:
  http:
    handler: src/lambda.http
    timeout: 2
    events:
      - http: ANY /
        cors: true
      - http: ANY /{proxy+}
        cors: true

# functions:
#   hello:
#     handler: handler.hello
#     events:
#       - http:
#           method: get
#           path: hello
#           integration: lambda
#           cors: true
# functions:
#   app:
#     handler: index.handler
#     events:
#       - http: ANY /
#         cors: true
#       - http: 'ANY {proxy+}'
#         cors: true

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName_cow}
